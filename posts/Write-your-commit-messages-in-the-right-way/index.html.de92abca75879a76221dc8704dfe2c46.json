{"head":{"title":"Write your commit messages in the right way","date":"2017-03-05T11:56:05.000Z","layout":"Post","description":"要怎麼寫 commit messages 一直是爭論不休的議題，每個 team 有自己偏好的方式，以及所謂的 best practices，像是知名的 AngularJS commit…"},"body":"<p>要怎麼寫 <code>commit messages</code> 一直是爭論不休的議題，每個 team 有自己偏好的方式，以及所謂的 <em>best practices</em>，像是知名的 <a href=\"https://gist.github.com/stephenparish/9941e89d80e2bc58a153\">AngularJS commit convensions</a>，在這裡我不想討論哪個標準才是最好的，因為實際上還是要根據自己的團隊去選擇適合的標準，只要內部統一了且每個人都能遵守那個規範的話，我覺得沒有必要為了達到完美而拖慢或限制了團隊的步伐。</p>\n<p>說是這麼說⋯⋯但你會想看到這樣的 <code>commit log</code> 嗎？</p>\n<pre><code class=\"hljs language-bash\">[5f25bbe] hide loading-word too\n[3c80512] finally\n[9578933] trying important\n[1f65c26] hide loading wrapper</code></pre>\n<p>沒錯，以前我的 <code>commit</code> 真的是這樣寫給自己看的，但其實實際上現在來看連我自己都看不懂，這樣的 <code>commit messages</code> 沒有任何意義就只是為了 <code>commit</code> 而 <code>commit</code> 而已，對於個人的小專案的話也許還不會有影響，但若是在團隊中的話可是會讓 Code Review 和 Changelog 有很大的困擾。</p>\n<p>所以縱使我並不喜歡 over engineering 的 <code>commit</code> 設計，但裡面有許多實用的大重點是我認為應該要遵守的。</p>\n<h3 id=\"use-english-whenever-possible\"><a href=\"#use-english-whenever-possible\" class=\"phenomic-HeadingAnchor\">#</a>Use English whenever possible</h3>\n<p>盡可能地寫英文。</p>\n<p>「可是我的團隊都是台灣人呀？為什麼 <code>commit messages</code> 不能用自己的母語呢？」你可能會這麼想，但是當你們的專案 open source 以後，來自世界各地的人要怎麼讀懂你們的母語呢？現實上來說英文確實是在工程師之間最廣泛使用的語言，用英文來寫 <code>commit</code> 可以確保有最多的人可以看得懂，就算你們的專案是公司的產品並沒有打算要開源，但誰也不能保證往後的日子哪一天突然就決定要開源了，畢竟連 <a href=\"https://github.com/chrislgarry/Apollo-11\">Apollo 11</a> 都開源了。</p>\n<h3 id=\"use-the-imperative-mood-in-the-subject-line\"><a href=\"#use-the-imperative-mood-in-the-subject-line\" class=\"phenomic-HeadingAnchor\">#</a>Use the imperative mood in the subject line</h3>\n<p>標題使用祈使語句。</p>\n<p>簡單來說就是以現在式動詞為開頭的句子，在這裡不探討文法之類的問題，單純就結構來看祈使句看起來更直接更簡單，直接代表了這個 <code>commit</code> <strong>如果套用後會做什麼</strong>，而不是做了些什麼，用一句英文來表達的話會是像這樣。</p>\n<blockquote>\n<p>If applied, this commit will [<em><strong>commit subject</strong></em>]</p>\n</blockquote>\n<p>將 <code>commit subject</code> 代換成你的 <code>commit</code> 標題後如果能形成一個正確的句子的話就是好的標題。</p>\n<p>另外在標題的最後，也要避免使用句號來做結尾，這在標題的使用上顯得多餘，但若是 <code>commit</code> 的內文的話則寫一般的英文語法即可，不需要使用祈使句也不需要省略句號。</p>\n<h3 id=\"use-a-list-of-types-to-categorize-the-commit\"><a href=\"#use-a-list-of-types-to-categorize-the-commit\" class=\"phenomic-HeadingAnchor\">#</a>Use a list of types to categorize the commit</h3>\n<p>將 <code>commit</code> 歸類於一個種類清單。</p>\n<p>每個 <code>commit</code> 都會有一個主要的目標，而那個目標大致可以歸類在一個種類清單中，一個清單的例子可以是：</p>\n<ul>\n<li><code>Feat</code>: A new feature</li>\n<li><code>Fix</code>: A bug fix</li>\n<li><code>Docs</code>: Documentation only changes</li>\n<li><code>Style</code>: Changes that do not affect the meaning of the code</li>\n<li><code>Refactor</code>: A code change that neither fixes a bug nor adds a feature</li>\n<li><code>Perf</code>: A code change that improves performance</li>\n<li><code>Test</code>: Adding missing tests or correcting existing tests</li>\n</ul>\n<p>清單的選擇可以直接使用社群上現有的清單，也可以自己針對需求去做改變，如此一來整個團隊就有統一的 <code>commit</code> 歸類，在 log 上就可以很清楚看出每個 <code>commit</code> 的種類，在日後產生 changelog 時也很方便。</p>\n<p>找出 <code>commit</code> 的 <code>type</code> 以後，將它放在 <code>commit</code> 標題的前面，像是：</p>\n<blockquote>\n<p>refactor: format and lint code</p>\n</blockquote>\n<p>格式可以自己決定，冒號只是一般的表現方式，後面就接原本 subject 的祈使句。</p>\n<h2 id=\"commitizen\"><a href=\"#commitizen\" class=\"phenomic-HeadingAnchor\">#</a>Commitizen</h2>\n<p>身為開發者，當然是所有東西都可以自動化的話越好，又或者在不同專案中要使用不同的 <code>commit</code> 規則，這時就會需要一些工具來幫忙了。<a href=\"https://github.com/commitizen/cz-cli\">Commitizen</a> 是其中一個相當受歡迎的工具，尤其和 Node.js 的專案相容性很高。</p>\n<h3 id=\"getting-started\"><a href=\"#getting-started\" class=\"phenomic-HeadingAnchor\">#</a>Getting Started</h3>\n<p>首先安裝 <code>Commitizen</code>（或是使用 npm 安裝，以下皆使用 yarn 做示範）。</p>\n<pre><code class=\"hljs language-bash\">yarn global add commitizen\n<span class=\"hljs-comment\"># npm install -g commitizen</span></code></pre>\n<p>之後安裝其中一個 <code>adapter</code>，可以把它當作一種預設的規範，你可以選擇直接使用現有的或是自己寫一個適合團隊的，在這裡我用我自己寫的 <a href=\"https://github.com/kevin940726/emoji-cz\"><code>emoji-cz</code></a> <code>adapter</code> 來做示範，這是一個基於以上我推薦的大原則之下在 subject 前面加上 type 對應的 emoji 的 <code>adapter</code>。</p>\n<pre><code class=\"hljs language-bash\">yarn global add emoji-cz</code></pre>\n<p>接下來指定將 <code>emoji-cz</code> 作為 <code>Commitizen</code> 的 global <code>adapter</code>。</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'{ \"path\": \"emoji-cz\" }'</span> > ~/.czrc</code></pre>\n<p>完成後往後的 <code>commit</code> 都用 <code>git cz</code> 來取代原本的 <code>git commit</code> 指令。</p>\n<pre><code class=\"hljs language-text\">> git cz\n? <span class=\"hljs-built_in\">Select</span> the <span class=\"hljs-built_in\">type</span> of change that you're committing: (<span class=\"hljs-keyword\">Use</span> arrow keys)\n❯ ✨  Feat:      A <span class=\"hljs-keyword\">new</span> feature\n  🐛  Fix:       A bug fix\n  📚  Docs:      Documentation only changes\n  🎨  Style:     Changes that <span class=\"hljs-keyword\">do</span> <span class=\"hljs-keyword\">not</span> affect the meaning of the <span class=\"hljs-built_in\">code</span>\n  🔨  Refactor:  A <span class=\"hljs-built_in\">code</span> change that neither fixes a bug nor adds a feature\n  🚀  Perf:      A <span class=\"hljs-built_in\">code</span> change that improves performance\n  🚨  Test:      Adding missing tests <span class=\"hljs-keyword\">or</span> correcting existing tests</code></pre>\n<p>以 <code>emoji-cz</code> 為例就會讓你從預設的清單中選擇這次 <code>commit</code> 的 type，之後再輸入標題、內文和 issues 後就會自動產生對應的 <code>commit message</code>。</p>\n<blockquote>\n<p>📚 Docs: update readme to show a simple demo</p>\n</blockquote>\n<h3 id=\"setup-locally\"><a href=\"#setup-locally\" class=\"phenomic-HeadingAnchor\">#</a>Setup locally</h3>\n<p>如果有需求要在不同的 project 使用不同的 <code>adapter</code>，<code>Commitizen</code> 也有提供簡單地設定方式，只要在專案的 <code>package.json</code> 中加入以下：</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-string\">\"config\"</span>: {\n  <span class=\"hljs-attr\">\"commitizen\"</span>: {\n    <span class=\"hljs-attr\">\"path\"</span>: <span class=\"hljs-string\">\"emoji-cz\"</span>\n  }\n}</code></pre>\n<p>在該專案目錄底下的 <code>git cz</code> 也會套用對應的 <code>adapter</code> 了。</p>\n<p>官方文件中提供了許多傑出的 <a href=\"https://github.com/commitizen/cz-cli#adapters\"><code>adapter</code></a> 可供選擇，但你也可以選擇自己寫一個 <code>adapter</code> 來符合自己的需求，任意 fork 一個與自己的架構相似的 <code>adapter</code> 後拿來改寫吧，邏輯非常的簡單而且能夠自定義的地方也很自由，我鼓勵每個人都可以試試看。</p>\n<h3 id=\"adding-alias\"><a href=\"#adding-alias\" class=\"phenomic-HeadingAnchor\">#</a>Adding alias</h3>\n<p>藉由一些 <code>alias</code> 的技巧可以將指令設定的更加符合個人需求，npm script 是最簡單的方式，例如將 <code>commit</code> 的指令加入 <code>package.json</code> 的 <code>scripts</code> 中：</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-string\">\"scripts\"</span>: {\n  <span class=\"hljs-attr\">\"commit\"</span>: <span class=\"hljs-string\">\"git cz\"</span>\n}</code></pre>\n<p>或是更簡單的使用 <a href=\"https://git-scm.com/book/zh-tw/v1/Git-%E5%9F%BA%E7%A4%8E-%E6%8F%90%E7%A4%BA%E5%92%8C%E6%8A%80%E5%B7%A7#Git-%E5%91%BD%E4%BB%A4%E5%88%A5%E5%90%8D\"><code>git alias</code></a> 的功能來做全域設定：</p>\n<pre><code class=\"hljs language-bash\">git config --global alias.c cz\ngit c <span class=\"hljs-comment\"># equals to 'git cz'</span></code></pre>\n<p>如果想要更進一步防止團隊中的人不小心 <code>commit</code> 了錯誤的格式，可以使用 git hook 像是 <a href=\"https://github.com/observing/pre-commit\"><code>pre-commit</code></a> 來做更進一步的檢查。</p>\n<h2 id=\"summary\"><a href=\"#summary\" class=\"phenomic-HeadingAnchor\">#</a>Summary</h2>\n<p>維護好的 <code>commit</code> 訊息人人有責！以上的原則雖然不是絕對，但遵守多一點點規則卻可以大幅的增加整體訊息的可讀性，希望大家看了以後也可以在自己的專案或是團隊中嘗試導入這些系統。當然如果喜歡我的 <a href=\"https://github.com/kevin940726/emoji-cz\"><code>emoji-cz</code></a> 的風格也不要吝嗇地幫我跟 <a href=\"https://github.com/commitizen/cz-cli\">Commitizen</a> 點個 star 分享給更多人哦～</p>\n<h2 id=\"reference\"><a href=\"#reference\" class=\"phenomic-HeadingAnchor\">#</a>Reference</h2>\n<ul>\n<li><a href=\"https://chris.beams.io/posts/git-commit/\">How to Write a Git Commit Message - Chris Beams</a></li>\n<li><a href=\"https://gist.github.com/stephenparish/9941e89d80e2bc58a153\">AngularJS Git Commit Message Conventions - stephenparish</a></li>\n<li><a href=\"https://github.com/commitizen/cz-cli\">Commitizen</a></li>\n<li><a href=\"https://github.com/kevin940726/emoji-cz\">emoji-cz</a></li>\n</ul>\n","__filename":"posts/Write-your-commit-messages-in-the-right-way.md","__url":"/posts/Write-your-commit-messages-in-the-right-way/","__resourceUrl":"/posts/Write-your-commit-messages-in-the-right-way/index.html","__dataUrl":"/posts/Write-your-commit-messages-in-the-right-way/index.html.de92abca75879a76221dc8704dfe2c46.json"}